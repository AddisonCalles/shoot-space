{"version":3,"file":"streetzero.cjs.production.min.js","sources":["../src/drawable.class.ts","../src/eventListener.class.ts","../src/helpers/math.ts","../src/helpers/color.ts","../src/game.class.ts","../src/health.class.ts","../src/vector.class.ts","../src/kinematic.class.ts","../src/layerPath.class.ts","../src/point.class.ts"],"sourcesContent":["import { LayerPath } from \"./layerPath.class\";\r\n\r\nexport class Drawable {\r\n    private _ctx: any;\r\n    private _offset = { x: 0, y: 0 };\r\n    private _canvas: any;\r\n    private _layers: LayerPath[] = [];\r\n    private _x: number;\r\n    private _y: number;\r\n    private _width: number;\r\n    private _height: number;\r\n    private _rotation: number = 0;\r\n    private _debug: boolean = false;\r\n    constructor(_canvas: any, _x: number, _y: number, _width: number = 0, _height: number = 0) {\r\n        this._width = _width;\r\n        this._height = _height;\r\n        this._x = _x;\r\n        this._y = _y;\r\n        this._ctx = _canvas.getContext('2d');\r\n        this._canvas = _canvas;\r\n    }\r\n    setLeyers(layers: LayerPath[]) {\r\n        this._layers = layers;\r\n    }\r\n    move(x: number, y: number) {\r\n        this._x += x;\r\n        this._y += y;\r\n    }\r\n    rotate(angle: number) {\r\n        this._rotation = this._rotation + angle;\r\n    }\r\n    setPos(x: number, y: number) {\r\n        this._x = x;\r\n        this._y = y;\r\n    }\r\n\r\n    setCanvas(canvas: any) {\r\n        this._canvas = canvas;\r\n        this._ctx = this._canvas.getContext('2d');\r\n    }\r\n    centerOffset() {\r\n        this._offset = { x: this.width / 2, y: this.height / 2 };\r\n    }\r\n    render() {\r\n        this._layers.forEach((layer) => {\r\n            layer.render();\r\n        });\r\n        if (this._debug) {\r\n            this.context.fillStyle = 'orange';\r\n            this.context.font = \"10px Arial\";\r\n            this.context.fillText(`(${this.x.toFixed()},${this.y.toFixed(0)})`, this.x - 10, this.y - 10);\r\n            this.context.strokeStyle = 'gray';\r\n            this.context.strokeRect(this.x, this.y, this.width, this.height);\r\n            this.context.beginPath();\r\n            this.context.arc(this.x, this.y, 4, 0, Math.PI * 2);\r\n            this.context.fill();\r\n        }\r\n    }\r\n    public enableDebug(){\r\n        this._debug = true;\r\n    }\r\n    public get context(): any { return this._ctx; }\r\n    get canvas() { return this._canvas; }\r\n    get x() { return this._x + this._offset.x; }\r\n    get y() { return this._y + this._offset.y; }\r\n    get x2() { return this.x + this._width; }\r\n    get y2() { return this.y + this._height; }\r\n    get rotation() { return this._rotation; }\r\n    get width() { return this._width; }\r\n    get height() { return this._height; }\r\n    get offset() { return this._offset; }\r\n    set offset(value) { this._offset = value; }\r\n    set rotation(value) { this._rotation = value; }\r\n\r\n}","export class EventListener{\r\n    _listeners: Function[] = [];\r\n    constructor(){\r\n    }\r\n    subscribe(listener: Function){\r\n        this._listeners.push(listener);\r\n    }\r\n    unsubscribe(listener:Function){\r\n        this._listeners = this._listeners.filter((inlist)=>inlist !== listener);\r\n    }\r\n    emit(params:any){\r\n        this._listeners.forEach((listener)=>listener(params));\r\n    }\r\n}","\r\n\r\nexport const random = (max:number, min:number) => Math.random() * (max - min) + min;\r\n\r\nexport const angleBetweenPoints = (p1:{x:number, y:number}, p2:{x:number, y:number}) => Math.atan2(p2.y - p1.y, p2.x - p1.x) * 180 / Math.PI;\r\n\r\nexport const vectorComponents = (direction:number, velocity:number) => {\r\n    const radians = direction * Math.PI / 180;\r\n    return { x: (velocity * Math.cos(radians)), y: (velocity * Math.sin(radians)) };\r\n}\r\n\r\nexport const vectorByXY = (vX:number, vY:number) => {\r\n    return {vel: Math.abs(((vX ** 2) + (vY ** 2)) ** 1 / 2), dir: Math.atan(vY / vX)}\r\n}\r\n","\r\nexport function rgba(color:string, transparency:number) {\r\n    var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(color);\r\n    return result ? `rgba(${parseInt(result[1], 16)},${parseInt(result[2], 16)},${parseInt(result[3], 16)}, ${transparency})` : '';\r\n  }\r\n  ","import { EventListener } from \"./eventListener.class\";\r\n\r\nexport class Game {\r\n    private _play = false;\r\n    private _level = 0;\r\n    private _context: any = {};\r\n    private _points = 0;\r\n    private _mainRunner: any;\r\n    private _canvas: any = {};\r\n    private _gameover = false;\r\n    private _playEvent = new EventListener();\r\n    private _preloadEvent = new EventListener();\r\n    private _gameOverEvent = new EventListener();\r\n    private _renderEvent = new EventListener();\r\n    private _nextLevelEvent = new EventListener();\r\n    private _fps = 1;\r\n    private _fpsCounter = 0;\r\n    private _time: number = 0;\r\n    private _initTime: number = 0;\r\n    private _lastTime: number = 0;\r\n    private _controls = {\r\n      fire: new EventListener(),\r\n      move: new EventListener(),\r\n      jump: new EventListener(),\r\n      \r\n    }\r\n    constructor(canvas?: HTMLCanvasElement) {\r\n      this._canvas = canvas;\r\n      this._context = canvas?.getContext('2d');\r\n      this._preloadEvent.emit(this);\r\n    }\r\n    render() {\r\n      if (!this._context) return;\r\n      this._renderEvent.emit(this);\r\n      if (this.isPlay) {\r\n  \r\n      }\r\n    }\r\n    _initMouseEvents() {\r\n      const gameRef = this;\r\n      this._canvas?.addEventListener('click', function (event: any) {\r\n          gameRef._controls.fire.emit({context: gameRef, event: event});\r\n      });\r\n      this._canvas?.addEventListener('mousemove', function (event: any) {\r\n          gameRef._controls.move.emit({context: gameRef, event: event});\r\n      });\r\n    }\r\n    clearCanvas() {\r\n      if (this._context && this._canvas) this._context?.clearRect(0, 0, this._canvas?.width, this._canvas?.height);\r\n    }\r\n    play() {\r\n      this._play = true;\r\n    }\r\n    nextLevel(sleepOffset = 0) {\r\n      this._level++;\r\n      setTimeout(() => {\r\n  \r\n      }, sleepOffset);\r\n    }\r\n  \r\n    start() {\r\n      this._initTime = new Date().getTime();\r\n      this._mainRunner = setInterval(() => {\r\n        this.clearCanvas();\r\n        this.render();\r\n        const now = new Date().getTime();\r\n        const milliSecondsDif = (now) - this._lastTime;\r\n        this._time = (+((now - this._initTime) / 1000).toFixed(0));\r\n  \r\n        if (milliSecondsDif >= 1000) {\r\n          this._lastTime = new Date().getTime();\r\n          this._fps = this._fpsCounter;\r\n          this._fpsCounter = 0;\r\n        }\r\n        this._fpsCounter++;\r\n      }, 1000 / 60)\r\n    }\r\n  \r\n    stop() {\r\n      clearInterval(this._mainRunner);\r\n    }\r\n  \r\n    incrementPoints(amount:number){\r\n      return this._points += amount;\r\n    }\r\n    get gameOverEvent() { return this._gameOverEvent; }\r\n    get nextLevelEvent() { return this._nextLevelEvent; }\r\n    get playEvent() { return this._playEvent; }\r\n    get gameOver() { return this._gameover; }\r\n    get points() { return this._points; }\r\n    get level() { return this._level; }\r\n    get isPlay() { return this._play; }\r\n    get time(){\r\n      return this._time;\r\n    }\r\n    get fps(){return this._fps;}\r\n  }","import { EventListener } from \"./eventListener.class\";\r\n\r\nexport class Health {\r\n    private _health: number;\r\n    private _total: number;\r\n    private _reduceEvent = new EventListener();\r\n    private _deadEvent = new EventListener();\r\n\r\n    constructor(total:number) {\r\n        this._total = total;\r\n        this._health = total;\r\n    }\r\n\r\n    reset() {\r\n        this._health = this._total;\r\n    }\r\n\r\n    reduce(reduce:number) {\r\n        const health = this._health - reduce;\r\n        if (health <= 0) {\r\n            this._health = 0;\r\n            this.deadEvent.emit(this);\r\n        } else {\r\n            this._health = health;\r\n        }\r\n    }\r\n\r\n    get current() { return this._health; }\r\n    get total() { return this._total; }\r\n    get reduceEvent() { return this._reduceEvent; }\r\n    get deadEvent() { return this._deadEvent; }\r\n    get isDead() { return this.current <= 0; }\r\n}","import { angleBetweenPoints, vectorByXY, vectorComponents } from './helpers/math';\r\nimport { Kinematic } from './kinematic.class';\r\n\r\nexport class Vector {\r\n    private _vel =0;\r\n    private _dir = 0;\r\n    private _velX = 0;\r\n    private _velY = 0;\r\n    private _element: Kinematic;\r\n    constructor(element: Kinematic) {\r\n        this._element = element;\r\n    }\r\n    setVel(velocity: number) {\r\n        this.setVector(velocity, this._dir);\r\n    }\r\n    setDir(_dir:number) {\r\n        this.setVector(this._vel, _dir);\r\n    }\r\n    rotate(grades:number) {\r\n        const sum = this._dir + grades;\r\n        this._dir = sum % 360;\r\n        this.setVector(this._vel, this._dir);\r\n    }\r\n    rotateTo(element:Kinematic){\r\n        const angleBetweenElements = angleBetweenPoints(this._element, element);\r\n        this.setDir(angleBetweenElements);\r\n    }\r\n    setVector(_vel:number, _dir:number) {\r\n        this._vel = Math.abs(_vel);\r\n        this._dir = _dir;\r\n        const components = vectorComponents(this._dir, this._vel);\r\n        this._velX = components.x;\r\n        this._velY = components.y;\r\n    }\r\n    setVelXY(velx:number, vely:number) {\r\n        this._velX = velx;\r\n        this._velY = vely;\r\n        const vector = vectorByXY(velx, vely);\r\n        this._vel = vector.vel;\r\n        this._dir = vector.dir;\r\n    }\r\n    get vel() { return { vel: this._vel, x: this._velX, y: this._velY }; }\r\n    get dir() { return this._dir }\r\n\r\n}","import { Drawable } from './drawable.class';\r\nimport { Vector } from './vector.class';\r\n\r\nexport class Kinematic extends Drawable {\r\n    private _destroy = false;\r\n    private _path: Path2D;\r\n    private _vector = new Vector(this);\r\n    private _enabledVectorRotation = true;\r\n    constructor(canvas: any, x: number, y: number, width: number = 0, height: number = 0) {\r\n        super(canvas, x, y, width, height)\r\n        this._path = new Path2D();\r\n        this._vector.setVector(0, 0);\r\n    }\r\n\r\n    edgeColision() {\r\n        if ((this.x <= 0) && this._vector.vel.x < 0) {\r\n            return 'right';\r\n        } else if (this.x2 >= this.canvas.width && this._vector.vel.x > 0) {\r\n            return 'left';\r\n        }\r\n        if ((this.y <= 0) && this._vector.vel.y < 0) {\r\n            return 'top';\r\n        } else if (this.y2 >= (this.canvas.height) && this._vector.vel.y > 0) {\r\n            return 'bottom';\r\n        }\r\n        return false;\r\n    }\r\n    hasColision(el: Kinematic) {\r\n        let xColision = false;\r\n        if (this.x <= el.x2 && el.x <= this.x2) {\r\n            xColision = true;\r\n        } else if (this.x2 >= el.x && this.x2 <= el.x2) {\r\n            xColision = true;\r\n        }\r\n        let yColision = false;\r\n        if (this.y <= el.y2 && el.y <= this.y2) {\r\n            yColision = true;\r\n        } else if (this.y2 >= el.y && this.y2 <= el.y2) {\r\n            yColision = true;\r\n        }\r\n        return (xColision && yColision);\r\n    }\r\n    move() {\r\n        super.move(this._vector.vel.x, this._vector.vel.y);\r\n    }\r\n    isDestroy() { return this._destroy; }\r\n    destroy() { this._destroy = true; }\r\n    get vector() { return this._vector; }\r\n    get path() { return this._path; }\r\n    set enabledVectorRotation(value) { this._enabledVectorRotation = value; }\r\n    get enabledVectorRotation() { return this._enabledVectorRotation; }\r\n}","import { Kinematic } from \"./kinematic.class\";\r\n\r\nexport class LayerPath {\r\n    private _color: string;\r\n    private _path: Path2D;\r\n    private _element: Kinematic;\r\n    private _originalPath: Path2D;\r\n    private _rotation = 0;\r\n\r\n    constructor(path: Path2D, color: string, element: Kinematic) {\r\n        this._color = color;\r\n        this._path = path;\r\n        this._originalPath = path;\r\n        this._element = element;\r\n    }\r\n\r\n    rotate(direction: number) {\r\n        const rotatePath = new Path2D();\r\n        rotatePath.addPath(this._originalPath, DOMMatrix.fromMatrix().translate(this._element.width / 2, this._element.height / 2).rotate(direction).translate(this._element.width / 2 * -1, this._element.height / 2 * -1));\r\n        this._path = new Path2D();\r\n        this.path.addPath(rotatePath, DOMMatrix.fromMatrix().translate(this._element.x, this._element.y));\r\n    }\r\n\r\n    render() {\r\n        const rotation = this.rotation + this._element.rotation + (this._element.enabledVectorRotation ? this._element.vector.dir : 0);\r\n        this.rotate(rotation);\r\n        this._element.context.fillStyle = this.color;\r\n        this._element.context.fill(this._path);\r\n    }\r\n\r\n    get rotation() { return this._rotation; }\r\n    set rotation(value) { this._rotation = value };\r\n    get color() { return this._color; }\r\n    get path() { return this._path; }\r\n\r\n}","export class Point {\r\n    public x: number;\r\n    public y: number;\r\n    constructor(x: number = 0, y: number = 0) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n}"],"names":["Drawable","_canvas","_x","_y","_width","_height","x","y","_ctx","getContext","setLeyers","layers","_layers","move","rotate","angle","_rotation","this","setPos","setCanvas","canvas","centerOffset","_offset","width","height","render","forEach","layer","_debug","context","fillStyle","font","fillText","toFixed","strokeStyle","strokeRect","beginPath","arc","Math","PI","fill","enableDebug","value","EventListener","subscribe","listener","_listeners","push","unsubscribe","filter","inlist","emit","params","angleBetweenPoints","p1","p2","atan2","vectorComponents","direction","velocity","radians","cos","sin","vectorByXY","vX","vY","vel","abs","dir","atan","max","min","random","color","transparency","result","exec","parseInt","Game","fire","jump","_context","_preloadEvent","_renderEvent","_initMouseEvents","gameRef","addEventListener","event","_controls","clearCanvas","clearRect","_this$_canvas3","_this$_canvas4","play","_play","nextLevel","sleepOffset","_level","setTimeout","start","_initTime","Date","getTime","_mainRunner","setInterval","_this","now","milliSecondsDif","_lastTime","_time","_fps","_fpsCounter","stop","clearInterval","incrementPoints","amount","_points","_gameOverEvent","_nextLevelEvent","_playEvent","_gameover","Health","total","_total","_health","reset","reduce","health","deadEvent","_reduceEvent","_deadEvent","current","Vector","element","_element","setVel","setVector","_dir","setDir","_vel","grades","rotateTo","angleBetweenElements","components","_velX","_velY","setVelXY","velx","vely","vector","Kinematic","_path","Path2D","_vector","edgeColision","x2","y2","hasColision","el","xColision","yColision","isDestroy","_destroy","destroy","_enabledVectorRotation","LayerPath","path","_color","_originalPath","rotatePath","addPath","DOMMatrix","fromMatrix","translate","rotation","enabledVectorRotation"],"mappings":"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"}